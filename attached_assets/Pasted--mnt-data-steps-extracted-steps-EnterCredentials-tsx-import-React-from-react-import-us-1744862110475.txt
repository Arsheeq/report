
--- /mnt/data/steps_extracted/steps/EnterCredentials.tsx ---
import React from 'react';
import { useStore } from '@/lib/store';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useMutation } from '@tanstack/react-query';
import { motion } from 'framer-motion';

export function EnterCredentials() {
  const { 
    cloudProvider, 
    setCurrentStep,
    accountName, 
    setAccountName,
    awsCredentials, 
    setAwsCredentials,
    azureCredentials,
    setAzureCredentials
  } = useStore();

  const { toast } = useToast();

  // For now, the mutation will just move to the next step
  // as we're not actually validating with real cloud services
  const validateCredentialsMutation = useMutation({
    mutationFn: async () => {
      // Simulate API call
      return new Promise(resolve => setTimeout(resolve, 1000));
    },
    onSuccess: () => {
      toast({
        title: "Credentials verified",
        description: "Your cloud credentials have been validated successfully."
      });
      setCurrentStep(4);
    },
    onError: (error: any) => {
      toast({
        variant: "destructive",
        title: "Validation failed",
        description: error.message || "Could not validate your cloud credentials. Please check and try again."
      });
    }
  });

  const handleBack = () => {
    setCurrentStep(2);
  };

  const handleNext = () => {
    // Basic validation
    if (!accountName.trim()) {
      toast({
        variant: "destructive",
        title: "Account name required",
        description: "Please enter an account name to continue."
      });
      return;
    }

    if (cloudProvider === 'aws') {
      if (!awsCredentials.accessKeyId || !awsCredentials.secretAccessKey) {
        toast({
          variant: "destructive",
          title: "Credentials required",
          description: "Please enter your AWS access key ID and secret access key."
        });
        return;
      }
    } else {
      if (!azureCredentials.tenantId || !azureCredentials.clientId || 
          !azureCredentials.clientSecret || !azureCredentials.subscriptionId) {
        toast({
          variant: "destructive",
          title: "Credentials required",
          description: "Please enter all required Azure credentials."
        });
        return;
      }
    }

    validateCredentialsMutation.mutate();
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        delay: 0.1,
        duration: 0.4,
        when: "beforeChildren",
        staggerChildren: 0.15
      }
    },
    exit: { 
      opacity: 0,
      y: -20,
      transition: { duration: 0.2 } 
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        type: "spring", 
        stiffness: 150, 
        damping: 15 
      }
    }
  };

  const buttonVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { 
      opacity: 1, 
      scale: 1,
      transition: { 
        delay: 0.5,
        duration: 0.3
      }
    },
    hover: { 
      scale: 1.05,
      boxShadow: "0px 5px 15px rgba(106, 93, 227, 0.3)",
      transition: { duration: 0.2 }
    },
    tap: { scale: 0.98 }
  };

  return (
    <motion.div 
      className="w-full max-w-2xl mx-auto bg-white p-8 rounded-md border border-gray-200 shadow-sm"
      initial="hidden"
      animate="visible"
      exit="exit"
      variants={containerVariants}
    >
      <motion.h2 
        className="step-heading mb-2"
        variants={itemVariants}
      >
        Enter Cloud Credentials
      </motion.h2>
      <motion.p 
        className="text-gray-600 mb-8 text-sm"
        variants={itemVariants}
      >
        {cloudProvider === 'aws' 
          ? 'Enter your AWS credentials to access your cloud resources' 
          : 'Enter your Azure credentials to access your cloud resources'}
      </motion.p>

      {/* AWS Credentials Form */}
      {cloudProvider === 'aws' && (
        <div className="space-y-6">
          <motion.div variants={itemVariants}>
            <label htmlFor="aws-account-name" className="block text-sm font-medium text-gray-700 mb-1">
              Account Name
            </label>
            <Input
              id="aws-account-name"
              value={accountName}
              onChange={(e) => setAccountName(e.target.value)}
              placeholder="Enter account name"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <label htmlFor="aws-access-key-id" className="block text-sm font-medium text-gray-700 mb-1">
              AWS Access Key ID
            </label>
            <Input
              id="aws-access-key-id"
              value={awsCredentials.accessKeyId}
              onChange={(e) => setAwsCredentials({...awsCredentials, accessKeyId: e.target.value})}
              placeholder="AKIAIOSFDNN7EXAMPLE"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <label htmlFor="aws-secret-access-key" className="block text-sm font-medium text-gray-700 mb-1">
              AWS Secret Access Key
            </label>
            <Input
              id="aws-secret-access-key"
              type="password"
              value={awsCredentials.secretAccessKey}
              onChange={(e) => setAwsCredentials({...awsCredentials, secretAccessKey: e.target.value})}
              placeholder="●●●●●●●●●●●●●●●●●●●●●●●●"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>
        </div>
      )}

      {/* Azure Credentials Form */}
      {cloudProvider === 'azure' && (
        <div className="space-y-6">
          <motion.div variants={itemVariants}>
            <label htmlFor="azure-account-name" className="block text-sm font-medium text-gray-700 mb-1">
              Account Name
            </label>
            <Input
              id="azure-account-name"
              value={accountName}
              onChange={(e) => setAccountName(e.target.value)}
              placeholder="Enter account name"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <label htmlFor="azure-tenant-id" className="block text-sm font-medium text-gray-700 mb-1">
              Tenant ID
            </label>
            <Input
              id="azure-tenant-id"
              value={azureCredentials.tenantId}
              onChange={(e) => setAzureCredentials({...azureCredentials, tenantId: e.target.value})}
              placeholder="00000000-0000-0000-0000-000000000000"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <label htmlFor="azure-client-id" className="block text-sm font-medium text-gray-700 mb-1">
              Client ID
            </label>
            <Input
              id="azure-client-id"
              value={azureCredentials.clientId}
              onChange={(e) => setAzureCredentials({...azureCredentials, clientId: e.target.value})}
              placeholder="00000000-0000-0000-0000-000000000000"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <label htmlFor="azure-client-secret" className="block text-sm font-medium text-gray-700 mb-1">
              Client Secret
            </label>
            <Input
              id="azure-client-secret"
              type="password"
              value={azureCredentials.clientSecret}
              onChange={(e) => setAzureCredentials({...azureCredentials, clientSecret: e.target.value})}
              placeholder="●●●●●●●●●●●●●●●●●●●●●●●●"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <label htmlFor="azure-subscription-id" className="block text-sm font-medium text-gray-700 mb-1">
              Subscription ID
            </label>
            <Input
              id="azure-subscription-id"
              value={azureCredentials.subscriptionId}
              onChange={(e) => setAzureCredentials({...azureCredentials, subscriptionId: e.target.value})}
              placeholder="00000000-0000-0000-0000-000000000000"
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-gray-700 bg-white focus:outline-none focus:border-gray-400"
            />
          </motion.div>
        </div>
      )}

      <div className="pt-6 flex justify-between mt-8">
        <motion.div
          variants={buttonVariants}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.98 }}
        >
          <Button
            variant="outline"
            type="button"
            onClick={handleBack}
            className="bg-white hover:bg-gray-50 px-5 py-2"
          >
            Back
          </Button>
        </motion.div>
        <motion.div
          variants={buttonVariants}
          whileHover="hover"
          whileTap="tap"
          animate={validateCredentialsMutation.isPending ? { scale: [1, 1.05, 1] } : {}}
          transition={{ 
            repeat: validateCredentialsMutation.isPending ? Infinity : 0, 
            duration: 1 
          }}
        >
          <Button 
            type="button" 
            onClick={handleNext}
            disabled={validateCredentialsMutation.isPending}
            className="px-5 py-2 bg-gradient-to-r from-[#54B9E7] to-[#6a5de3] text-white border-none"
          >
            {validateCredentialsMutation.isPending ? "Validating..." : "Next"}
          </Button>
        </motion.div>
      </div>
    </motion.div>
  );
}
--- /mnt/data/steps_extracted/steps/FrequencySelection.tsx ---
import React from 'react';
import { useStore } from '@/lib/store';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Calendar, CalendarCheck } from 'lucide-react';
import { motion } from 'framer-motion';

export function FrequencySelection() {
  const { 
    frequency, 
    setFrequency, 
    setCurrentStep 
  } = useStore();

  const { toast } = useToast();

  const handleBack = () => {
    setCurrentStep(4);
  };

  const handleNext = () => {
    if (!frequency) {
      toast({
        variant: "destructive",
        title: "Selection Required",
        description: "Please select a report frequency to continue."
      });
      return;
    }

    setCurrentStep(6);
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        delay: 0.1,
        duration: 0.4,
        when: "beforeChildren",
        staggerChildren: 0.2
      }
    },
    exit: { 
      opacity: 0,
      y: -20,
      transition: { duration: 0.2 } 
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        type: "spring", 
        stiffness: 150, 
        damping: 15 
      }
    }
  };

  const buttonVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { 
      opacity: 1, 
      scale: 1,
      transition: { 
        delay: 0.5,
        duration: 0.3
      }
    },
    hover: { 
      scale: 1.05,
      boxShadow: "0px 5px 15px rgba(106, 93, 227, 0.3)",
      transition: { duration: 0.2 }
    },
    tap: { scale: 0.98 }
  };

  const iconAnimation = {
    hover: { 
      rotate: [0, -10, 10, -10, 0],
      transition: { 
        duration: 1,
        repeat: Infinity,
        repeatType: "loop" as const
      }
    }
  };

  return (
    <motion.div 
      className="w-full max-w-2xl mx-auto bg-white p-8 rounded-md border border-gray-200 shadow-sm"
      initial="hidden"
      animate="visible"
      exit="exit"
      variants={containerVariants}
    >
      <motion.h2 
        className="text-2xl font-semibold mb-2 bg-gradient-to-r from-[#1a202c] to-[#4a5568] bg-clip-text text-transparent"
        variants={itemVariants}
      >
        Set Report Frequency
      </motion.h2>
      <motion.p 
        className="text-gray-600 mb-8 text-sm"
        variants={itemVariants}
      >
        Choose how often you would like to receive the utilization report
      </motion.p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        {/* Daily frequency */}
        <motion.div 
          className={`p-6 flex flex-col items-center cursor-pointer rounded-md border ${
            frequency === 'daily' ? 'border-[#6a5de3] bg-blue-50' : 'border-gray-200 bg-[#F8FAFF]'
          } hover:border-[#6a5de3] hover:shadow-md transition-all duration-200`}
          onClick={() => setFrequency('daily')}
          variants={itemVariants}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0, transition: { delay: 0.2 } }}
        >
          <motion.div 
            className="w-16 h-16 flex items-center justify-center mb-4 bg-[#5E72E4] bg-opacity-20 rounded-md"
            whileHover="hover"
            variants={iconAnimation}
          >
            <Calendar className="w-8 h-8 text-[#5E72E4]" />
          </motion.div>
          <h3 className={`font-medium text-center ${frequency === 'daily' ? 'text-[#6a5de3]' : ''}`}>Daily</h3>
          <p className="text-gray-500 text-sm text-center mt-2">Receive reports every day</p>
        </motion.div>

        {/* Weekly frequency */}
        <motion.div 
          className={`p-6 flex flex-col items-center cursor-pointer rounded-md border ${
            frequency === 'weekly' ? 'border-[#6a5de3] bg-blue-50' : 'border-gray-200 bg-[#F8FAFF]'
          } hover:border-[#6a5de3] hover:shadow-md transition-all duration-200`}
          onClick={() => setFrequency('weekly')}
          variants={itemVariants}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0, transition: { delay: 0.3 } }}
        >
          <motion.div 
            className="w-16 h-16 flex items-center justify-center mb-4 bg-[#F56565] bg-opacity-20 rounded-md"
            whileHover="hover"
            variants={iconAnimation}
          >
            <CalendarCheck className="w-8 h-8 text-[#F56565]" />
          </motion.div>
          <h3 className={`font-medium text-center ${frequency === 'weekly' ? 'text-[#6a5de3]' : ''}`}>Weekly</h3>
          <p className="text-gray-500 text-sm text-center mt-2">Receive reports every week</p>
        </motion.div>
      </div>

      <div className="pt-6 flex justify-between mt-8">
        <motion.div
          variants={buttonVariants}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.98 }}
        >
          <Button
            variant="outline"
            type="button"
            onClick={handleBack}
            className="bg-white hover:bg-gray-50 px-5 py-2"
          >
            Back
          </Button>
        </motion.div>
        <motion.div
          variants={buttonVariants}
          whileHover="hover"
          whileTap="tap"
        >
          <Button 
            type="button" 
            onClick={handleNext}
            className="px-5 py-2 bg-gradient-to-r from-[#54B9E7] to-[#6a5de3] text-white border-none"
          >
            Next
          </Button>
        </motion.div>
      </div>
    </motion.div>
  );
}
--- /mnt/data/steps_extracted/steps/GenerateReport.tsx ---
import React, { useState } from 'react';
import { useStore } from '@/lib/store';
import { Button } from '@/components/ui/button';
import { DownloadCloud } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useMutation } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Card, CardContent } from '@/components/ui/card';
import { generatePdf } from '@/lib/report-generator';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { CheckCircle2 } from 'lucide-react';

export function GenerateReport() {
  const {
    cloudProvider,
    reportType,
    accountName,
    selectedResources,
    frequency,
    deliveryMethod,
    emailAddress,
    billingDate,
    setCurrentStep,
    resources
  } = useStore();
  
  const { toast } = useToast();
  const [showSuccess, setShowSuccess] = useState(false);

  const generateReportMutation = useMutation({
    mutationFn: async () => {
      // Different endpoints for different report types
      const endpoint = reportType === 'utilization'
        ? '/api/generate-utilization-report'
        : '/api/generate-billing-report';
        
      // Prepare the request data based on report type
      const data = reportType === 'utilization'
        ? {
            cloudProvider,
            accountName,
            resourceIds: selectedResources,
            frequency,
            deliveryMethod,
            emailAddress: (deliveryMethod === 'email' || deliveryMethod === 'both') ? emailAddress : undefined
          }
        : {
            cloudProvider,
            accountName,
            year: billingDate.year,
            month: billingDate.month,
            includeAllocationTags: true,
            format: 'pdf'
          };
          
      return apiRequest('POST', endpoint, data);
    },
    onSuccess: async (response) => {
      const data = await response.json();

      // Show success message
      setShowSuccess(true);
      toast({
        variant: "success",
        title: "Report generated successfully",
        description: "Your download will start automatically."
      });

      // Generate and download PDF
      try {
        if (data.reportUrl) {
          // If server provided a URL, open it
          window.open(data.reportUrl, '_blank');
        } else {
          // Otherwise generate client-side PDF
          const pdfBlob = await generatePdf({
            cloudProvider,
            reportType,
            accountName,
            resources: resources.filter(r => selectedResources.includes(r.id)),
            billingData: data.billingData || null,
            frequency,
            month: billingDate.month,
            year: billingDate.year
          });
          
          // Create a download link and trigger it
          const url = URL.createObjectURL(pdfBlob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${reportType}-report-${new Date().toISOString().split('T')[0]}.pdf`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }
      } catch (error) {
        console.error('Error generating PDF:', error);
        toast({
          variant: "destructive",
          title: "PDF generation failed",
          description: "Failed to generate PDF. Please try again."
        });
      }
    },
    onError: (error: any) => {
      toast({
        variant: "destructive",
        title: "Report generation failed",
        description: error.message || "Could not generate the report. Please try again."
      });
    }
  });

  const handleBack = () => {
    setCurrentStep(reportType === 'utilization' ? 4 : 3);
  };

  const handleGenerateReport = () => {
    generateReportMutation.mutate();
  };

  // Helper to get the month name from the month number
  const getMonthName = (monthNum: string) => {
    const months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return months[parseInt(monthNum) - 1];
  };

  return (
    <div>
      <h2 className="text-lg font-semibold text-slate-800 mb-6">Report Summary</h2>
      
      <div className="bg-slate-50 rounded-lg p-6 mb-8">
        <div className="space-y-4">
          <div className="sm:grid sm:grid-cols-3 sm:gap-4">
            <dt className="text-sm font-medium text-slate-500">Cloud Provider</dt>
            <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
              {cloudProvider === 'aws' ? 'Amazon Web Services' : 'Microsoft Azure'}
            </dd>
          </div>
          
          <div className="sm:grid sm:grid-cols-3 sm:gap-4">
            <dt className="text-sm font-medium text-slate-500">Report Type</dt>
            <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
              {reportType === 'utilization' ? 'Utilization Report' : 'Monthly Billing Report'}
            </dd>
          </div>
          
          <div className="sm:grid sm:grid-cols-3 sm:gap-4">
            <dt className="text-sm font-medium text-slate-500">Account</dt>
            <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
              {accountName}
            </dd>
          </div>
          
          {reportType === 'utilization' && (
            <>
              <div className="sm:grid sm:grid-cols-3 sm:gap-4">
                <dt className="text-sm font-medium text-slate-500">Resources</dt>
                <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
                  {selectedResources.length} selected resources
                </dd>
              </div>
              
              <div className="sm:grid sm:grid-cols-3 sm:gap-4">
                <dt className="text-sm font-medium text-slate-500">Frequency</dt>
                <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
                  {frequency.charAt(0).toUpperCase() + frequency.slice(1)}
                </dd>
              </div>
              
              <div className="sm:grid sm:grid-cols-3 sm:gap-4">
                <dt className="text-sm font-medium text-slate-500">Delivery Method</dt>
                <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
                  {deliveryMethod === 'email' && `Email to ${emailAddress}`}
                  {deliveryMethod === 'dashboard' && 'Dashboard'}
                  {deliveryMethod === 'both' && `Email to ${emailAddress} and Dashboard`}
                </dd>
              </div>
            </>
          )}
          
          {reportType === 'billing' && (
            <div className="sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-slate-500">Billing Period</dt>
              <dd className="mt-1 text-sm text-slate-900 sm:mt-0 sm:col-span-2">
                {billingDate.month && billingDate.year 
                  ? `${getMonthName(billingDate.month)} ${billingDate.year}`
                  : 'Not selected'}
              </dd>
            </div>
          )}
        </div>
      </div>
      
      <div className="space-y-4">
        <div className="border border-slate-200 rounded-lg p-4">
          <h3 className="text-base font-medium text-slate-800 mb-4">Report Preview</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="text-sm font-medium text-slate-700 mb-2">
                {reportType === 'utilization' ? 'CPU Utilization' : 'Monthly Cost Breakdown'}
              </h4>
              <Card>
                <CardContent className="p-4">
                  <div className="h-48 flex items-center justify-center bg-slate-50 rounded">
                    <div className="text-center">
                      <div className="text-sm text-slate-500">
                        {reportType === 'utilization' ? 'CPU Utilization Chart' : 'Cost Breakdown Chart'}
                      </div>
                      <div className="mt-2 text-xs text-slate-400">
                        Preview will be generated in the final report
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <div>
              <h4 className="text-sm font-medium text-slate-700 mb-2">
                {reportType === 'utilization' ? 'Memory Utilization' : 'Service Usage Distribution'}
              </h4>
              <Card>
                <CardContent className="p-4">
                  <div className="h-48 flex items-center justify-center bg-slate-50 rounded">
                    <div className="text-center">
                      <div className="text-sm text-slate-500">
                        {reportType === 'utilization' ? 'Memory Utilization Chart' : 'Service Distribution Chart'}
                      </div>
                      <div className="mt-2 text-xs text-slate-400">
                        Preview will be generated in the final report
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
          
          <div className="mt-6">
            <h4 className="text-sm font-medium text-slate-700 mb-2">Cost Analysis</h4>
            <Card>
              <CardContent className="p-4">
                <div className="h-48 flex items-center justify-center bg-slate-50 rounded">
                  <div className="text-center">
                    <div className="text-sm text-slate-500">Cost Analysis Chart</div>
                    <div className="mt-2 text-xs text-slate-400">
                      Preview will be generated in the final report
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      
      {showSuccess && (
        <Alert variant="default" className="mt-4 bg-green-50 border border-green-200 text-green-800">
          <CheckCircle2 className="h-4 w-4" />
          <AlertTitle>Success</AlertTitle>
          <AlertDescription>
            Report generated successfully! Your download should start automatically.
          </AlertDescription>
        </Alert>
      )}
      
      <div className="pt-6 flex justify-between">
        <Button
          variant="outline"
          type="button"
          onClick={handleBack}
          className="bg-white hover:bg-gray-50"
        >
          Back
        </Button>
        <Button 
          type="button" 
          onClick={handleGenerateReport}
          disabled={generateReportMutation.isPending}
          className="px-6 py-3 flex items-center"
        >
          {generateReportMutation.isPending ? (
            <>
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating...
            </>
          ) : (
            <>
              <DownloadCloud className="h-5 w-5 mr-2" />
              Generate & Download Report
            </>
          )}
        </Button>
      </div>
    </div>
  );
}

--- /mnt/data/steps_extracted/steps/SelectCloudProvider.tsx ---
import React from 'react';
import { useStore } from '@/lib/store';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { motion } from 'framer-motion';

export function SelectCloudProvider() {
  const { 
    cloudProvider, 
    setCloudProvider, 
    setCurrentStep 
  } = useStore();

  const { toast } = useToast();

  const handleNext = () => {
    if (!cloudProvider) {
      toast({
        variant: "destructive",
        title: "Selection Required",
        description: "Please select a cloud provider to continue."
      });
      return;
    }

    setCurrentStep(2);
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        delay: 0.1,
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.2
      }
    },
    exit: { 
      opacity: 0,
      y: -20,
      transition: { duration: 0.2 } 
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        type: "spring", 
        stiffness: 150, 
        damping: 15 
      }
    }
  };

  const buttonVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { 
      opacity: 1, 
      scale: 1,
      transition: { 
        delay: 0.5,
        duration: 0.3
      }
    },
    hover: { 
      scale: 1.05,
      boxShadow: "0px 5px 15px rgba(106, 93, 227, 0.3)",
      transition: { duration: 0.2 }
    },
    tap: { scale: 0.98 }
  };

  return (
    <motion.div 
      className="w-full max-w-2xl mx-auto bg-white p-8 rounded-md border border-gray-200 shadow-sm"
      initial="hidden"
      animate="visible"
      exit="exit"
      variants={containerVariants}
    >
      <motion.h2 
        className="text-2xl font-semibold mb-2 bg-gradient-to-r from-[#1a202c] to-[#2d3748] bg-clip-text text-transparent" // Updated gradient
        variants={itemVariants}
      >
        Select Cloud Provider
      </motion.h2>
      <motion.p 
        className="text-gray-600 mb-8 text-sm"
        variants={itemVariants}
      >
        Choose the cloud provider you want to generate insights for
      </motion.p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        {/* AWS Selection */}
        <motion.div 
          className={`p-6 flex flex-col items-center cursor-pointer rounded-md border ${
            cloudProvider === 'aws' ? 'border-[#6a5de3] bg-blue-50' : 'border-gray-200 bg-[#F8FAFF]'
          } hover:border-[#6a5de3] hover:shadow-md transition-all duration-200`}
          onClick={() => setCloudProvider('aws')}
          variants={itemVariants}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <motion.div 
            className="w-16 h-16 flex items-center justify-center mb-4"
            animate={{ 
              rotateY: cloudProvider === 'aws' ? [0, 360] : 0 
            }}
            transition={{ duration: 0.8, ease: "easeOut" }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" className="w-12 h-12 text-[#FF9900]">
              <path fill="currentColor" d="M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.91 637.91 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z"/>
            </svg>
          </motion.div>
          <h3 className={`font-medium text-center ${cloudProvider === 'aws' ? 'text-[#6a5de3]' : ''}`}>Amazon Web Services</h3>
          <p className="text-gray-500 text-sm text-center mt-2">EC2, RDS, and other AWS services</p>
        </motion.div>

        {/* Azure Selection */}
        <motion.div 
          className={`p-6 flex flex-col items-center cursor-pointer rounded-md border ${
            cloudProvider === 'azure' ? 'border-[#6a5de3] bg-blue-50' : 'border-gray-200 bg-[#F8FAFF]'
          } hover:border-[#6a5de3] hover:shadow-md transition-all duration-200`}
          onClick={() => setCloudProvider('azure')}
          variants={itemVariants}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <motion.div 
            className="w-16 h-16 flex items-center justify-center mb-4"
            animate={{ 
              rotateY: cloudProvider === 'azure' ? [0, 360] : 0 
            }}
            transition={{ duration: 0.8, ease: "easeOut" }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-12 h-12 text-[#0078D4]">
              <path fill="currentColor" d="M5.483 21.3H24L14.025 4.013l-3.038 8.347 5.836 6.938L5.483 21.3zM13.23 2.7L6.105 8.677 0 19.253h5.505l7.725-16.553z"/>
            </svg>
          </motion.div>
          <h3 className={`font-medium text-center ${cloudProvider === 'azure' ? 'text-[#6a5de3]' : ''}`}>Microsoft Azure</h3>
          <p className="text-gray-500 text-sm text-center mt-2">Virtual Machines, SQL Databases, and more</p>
        </motion.div>
      </div>

      <div className="pt-6 flex justify-end mt-8">
        <motion.div
          variants={buttonVariants}
          whileHover="hover"
          whileTap="tap"
        >
          <Button 
            type="button" 
            onClick={handleNext}
            className="px-5 py-2 bg-gradient-to-r from-[#54B9E7] to-[#6a5de3] text-white border-none"
          >
            Next
          </Button>
        </motion.div>
      </div>
    </motion.div>
  );
}
--- /mnt/data/steps_extracted/steps/SelectReportType.tsx ---
import React from 'react';
import { useStore } from '@/lib/store';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { FileBarChart2, FileSpreadsheet } from 'lucide-react';
import { motion } from 'framer-motion';

export function SelectReportType() {
  const { 
    reportType, 
    setReportType, 
    setCurrentStep 
  } = useStore();

  const { toast } = useToast();

  const handleBack = () => {
    setCurrentStep(1);
  };

  const handleNext = () => {
    if (!reportType) {
      toast({
        variant: "destructive",
        title: "Selection Required",
        description: "Please select a report type to continue."
      });
      return;
    }

    setCurrentStep(3);
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: {
        delay: 0.1,
        duration: 0.4,
        when: "beforeChildren",
        staggerChildren: 0.2
      }
    },
    exit: { 
      opacity: 0,
      y: -20,
      transition: { duration: 0.2 } 
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        type: "spring", 
        stiffness: 150, 
        damping: 15 
      }
    }
  };

  const buttonVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { 
      opacity: 1, 
      scale: 1,
      transition: { 
        delay: 0.5,
        duration: 0.3
      }
    },
    hover: { 
      scale: 1.05,
      boxShadow: "0px 5px 15px rgba(106, 93, 227, 0.3)",
      transition: { duration: 0.2 }
    },
    tap: { scale: 0.98 }
  };

  const iconAnimation = {
    hover: { 
      y: -5,
      transition: { 
        yoyo: Infinity, 
        duration: 0.8 
      }
    }
  };

  return (
    <motion.div 
      className="w-full max-w-2xl mx-auto bg-white p-8 rounded-md border border-gray-200 shadow-sm"
      initial="hidden"
      animate="visible"
      exit="exit"
      variants={containerVariants}
    >
      <motion.h2 
        className="text-2xl font-semibold mb-2 bg-gradient-to-r from-[#1a202c] to-[#2d3748] bg-clip-text text-transparent" 
        variants={itemVariants}
      >
        Select Report Type
      </motion.h2>
      <motion.p 
        className="text-gray-600 mb-8 text-sm"
        variants={itemVariants}
      >
        Choose what type of report you want to generate
      </motion.p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        {/* Utilization Report */}
        <motion.div 
          className={`p-6 flex flex-col items-center cursor-pointer rounded-md border ${
            reportType === 'utilization' ? 'border-[#6a5de3] bg-blue-50' : 'border-gray-200 bg-[#F8FAFF]'
          } hover:border-[#6a5de3] hover:shadow-md transition-all duration-200`}
          onClick={() => setReportType('utilization')}
          variants={itemVariants}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <motion.div 
            className="w-16 h-16 flex items-center justify-center mb-4 bg-[#5E72E4] bg-opacity-20 rounded-md"
            whileHover="hover"
            variants={iconAnimation}
          >
            <FileBarChart2 className="w-8 h-8 text-[#5E72E4]" />
          </motion.div>
          <h3 className={`font-medium text-center ${reportType === 'utilization' ? 'text-[#6a5de3]' : ''}`}>Utilization Report</h3>
          <p className="text-gray-500 text-sm text-center mt-2">Resource usage across your cloud instances</p>
        </motion.div>

        {/* Monthly Bill */}
        <motion.div 
          className={`p-6 flex flex-col items-center cursor-pointer rounded-md border ${
            reportType === 'billing' ? 'border-[#6a5de3] bg-blue-50' : 'border-gray-200 bg-[#F8FAFF]'
          } hover:border-[#6a5de3] hover:shadow-md transition-all duration-200`}
          onClick={() => setReportType('billing')}
          variants={itemVariants}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <motion.div 
            className="w-16 h-16 flex items-center justify-center mb-4 bg-[#F56565] bg-opacity-20 rounded-md"
            whileHover="hover"
            variants={iconAnimation}
          >
            <FileSpreadsheet className="w-8 h-8 text-[#F56565]" />
          </motion.div>
          <h3 className={`font-medium text-center ${reportType === 'billing' ? 'text-[#6a5de3]' : ''}`}>Monthly Bill</h3>
          <p className="text-gray-500 text-sm text-center mt-2">Cost breakdown by service and resource</p>
        </motion.div>
      </div>

      <div className="pt-6 flex justify-between mt-8">
        <motion.div
          variants={buttonVariants}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.98 }}
        >
          <Button 
            type="button" 
            onClick={handleBack}
            variant="outline"
            className="bg-white hover:bg-gray-50 px-5 py-2"
          >
            Back
          </Button>
        </motion.div>
        <motion.div
          variants={buttonVariants}
          whileHover="hover"
          whileTap="tap"
        >
          <Button 
            type="button" 
            onClick={handleNext}
            className="px-5 py-2 bg-gradient-to-r from-[#54B9E7] to-[#6a5de3] text-white border-none"
          >
            Next
          </Button>
        </motion.div>
      </div>
    </motion.div>
  );
}
--- /mnt/data/steps_extracted/steps/SelectResources.tsx ---
import React, { useState, useEffect } from 'react';
import { useStore } from '@/lib/store';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';
import { motion } from 'framer-motion';
import { CheckedState } from "@radix-ui/react-checkbox";

export function SelectResources() {
  const { 
    cloudProvider, 
    reportType, 
    setCurrentStep, 
    selectedResources, 
    setSelectedResources,
    billingDate,
    setBillingDate
  } = useStore();

  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState('ec2');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectAll, setSelectAll] = useState(false);

  const { 
    data: resources = [], 
    isLoading,
    isError,
    error
  } = useQuery({
    queryKey: [
      reportType === 'utilization' 
        ? `/api/${cloudProvider}/resources` 
        : null
    ],
    enabled: reportType === 'utilization'
  });

  useEffect(() => {
    if (isError) {
      toast({
        variant: "destructive",
        title: "Error loading resources",
        description: (error as Error)?.message || "Could not load cloud resources. Please try again."
      });
    }
  }, [isError, error, toast]);

  useEffect(() => {
    if (selectAll) {
      const filteredResources = getFilteredResources();
      setSelectedResources(filteredResources.map(resource => resource.id));
    } else if (selectedResources.length === getFilteredResources().length) {
      setSelectedResources([]);
    }
  }, [selectAll]);

  const getFilteredResources = () => {
    if (!Array.isArray(resources)) return [];

    let filtered = [...resources];

    filtered = filtered.filter(resource => {
      if (activeTab === 'ec2') {
        return resource.type.toLowerCase().includes('ec2');
      } else if (activeTab === 'rds') {
        return resource.type.toLowerCase().includes('rds');
      }
      return false;
    });

    if (searchQuery) {
      filtered = filtered.filter(resource => 
        resource.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
        resource.id.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    return filtered;
  };

  const handleSelectResource = (resourceId: string) => {
    if (selectedResources.includes(resourceId)) {
      setSelectedResources(selectedResources.filter(id => id !== resourceId));
    } else {
      setSelectedResources([...selectedResources, resourceId]);
    }
  };

  const handleBack = () => {
    setCurrentStep(2);
  };

  const handleNext = () => {
    if (selectedResources.length === 0) {
      toast({
        variant: "destructive",
        title: "No resources selected",
        description: "Please select at least one resource to continue."
      });
      return;
    }
    setCurrentStep(5);
  };

  return (
    <motion.div 
      className="w-full max-w-4xl mx-auto p-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="flex border-b">
          <button
            className={`flex-1 px-6 py-3 text-center font-medium ${
              activeTab === 'ec2' 
                ? 'bg-white text-gray-900 border-b-2 border-blue-500' 
                : 'bg-gray-50 text-gray-500'
            }`}
            onClick={() => setActiveTab('ec2')}
          >
            EC2 Instances
          </button>
          <button
            className={`flex-1 px-6 py-3 text-center font-medium ${
              activeTab === 'rds' 
                ? 'bg-white text-gray-900 border-b-2 border-blue-500' 
                : 'bg-gray-50 text-gray-500'
            }`}
            onClick={() => setActiveTab('rds')}
          >
            RDS Instances
          </button>
        </div>

        <div className="p-4">
          <Input
            placeholder="Search instances..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="mb-4 bg-white border border-gray-200"
          />

          <div className="rounded-lg border border-gray-200 overflow-hidden">
            <Table>
              <TableHeader className="bg-gray-50">
                <TableRow>
                  <TableHead className="w-[40px] py-3">
                    <Checkbox 
                      checked={selectAll} 
                      onCheckedChange={(checked: CheckedState) => setSelectAll(checked === true)}
                    />
                  </TableHead>
                  <TableHead className="py-3">Instance ID</TableHead>
                  <TableHead className="py-3">Name</TableHead>
                  <TableHead className="py-3">Region</TableHead>
                  <TableHead className="py-3">Type</TableHead>
                  <TableHead className="py-3">State</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {isLoading ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-8">
                      Loading resources...
                    </TableCell>
                  </TableRow>
                ) : getFilteredResources().length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-8">
                      No resources found{searchQuery ? ` matching "${searchQuery}"` : ''}
                    </TableCell>
                  </TableRow>
                ) : (
                  getFilteredResources().map((resource) => (
                    <TableRow 
                      key={resource.id}
                      className="relative transition-all duration-300 hover:scale-[1.02] hover:bg-blue-50/50 group"
                    >
                      <div className="absolute -inset-1 bg-gradient-to-r from-blue-100/20 to-violet-100/20 rounded-lg blur opacity-0 group-hover:opacity-100 transition-all duration-500"></div>
                      <TableCell className="relative">
                        <Checkbox 
                          checked={selectedResources.includes(resource.id)}
                          onCheckedChange={() => handleSelectResource(resource.id)}
                        />
                      </TableCell>
                      <TableCell className="relative font-medium">{resource.id}</TableCell>
                      <TableCell className="relative">{resource.name}</TableCell>
                      <TableCell className="relative">{resource.region}</TableCell>
                      <TableCell className="relative">{resource.type}</TableCell>
                      <TableCell className="relative">
                        <Badge className={`
                          ${resource.status === 'Running' ? 'bg-green-100 text-green-800' : ''}
                          ${resource.status === 'Stopped' ? 'bg-red-100 text-red-800' : ''}
                          ${resource.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' : ''}
                        `}>
                          {resource.status}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </div>
      </div>

      <div className="flex justify-between mt-6">
        <Button
          variant="outline" 
          onClick={handleBack}
          className="bg-white hover:bg-gray-50"
        >
          Back
        </Button>
        <Button
          onClick={handleNext}
          className="bg-blue-500 hover:bg-blue-600 text-white"
        >
          Next
        </Button>
      </div>
    </motion.div>
  );
}
--- /mnt/data/steps_extracted/steps/StepIndicator.tsx ---
import React from 'react';
import { useStore } from '@/lib/store';
import { motion } from 'framer-motion';

export function StepIndicator() {
  const { currentStep, reportType, setCurrentStep } = useStore();
  
  // Define steps based on report type
  const getSteps = () => {
    const baseSteps = [
      { 
        number: 1,
        title: 'Cloud Provider'
      },
      { 
        number: 2,
        title: 'Report Type'
      }
    ];
    
    // Different steps for different report types
    if (reportType === 'billing') {
      return [
        ...baseSteps,
        { 
          number: 3,
          title: 'Details'
        },
        { 
          number: 4,
          title: 'Credentials'
        },
        { 
          number: 5,
          title: 'Generate'
        }
      ];
    } else {
      return [
        ...baseSteps,
        { 
          number: 3,
          title: 'Credentials'
        },
        { 
          number: 4,
          title: 'Resources'
        },
        { 
          number: 5,
          title: 'Frequency'
        },
        { 
          number: 6,
          title: 'Generate'
        }
      ];
    }
  };

  const steps = getSteps();

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 10, opacity: 0 },
    visible: { 
      y: 0, 
      opacity: 1,
      transition: {
        type: 'spring',
        stiffness: 150,
        damping: 15
      }
    }
  };

  const lineVariants = {
    hidden: { scaleX: 0 },
    visible: { 
      scaleX: 1,
      transition: {
        duration: 0.5
      }
    }
  };

  return (
    <motion.div 
      className="w-full mx-auto mb-8"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <div className="flex items-center justify-center">
        {steps.map((step, index) => {
          const isActive = index + 1 === currentStep;
          const isPast = index + 1 < currentStep;
          const canNavigate = isPast || index + 1 === currentStep;
          
          return (
            <React.Fragment key={index}>
              <motion.div 
                className="flex flex-col items-center"
                variants={itemVariants}
              >
                <motion.button
                  onClick={() => {
                    if (canNavigate) {
                      setCurrentStep(index + 1);
                    }
                  }}
                  whileHover={canNavigate ? { scale: 1.1 } : {}}
                  whileTap={canNavigate ? { scale: 0.95 } : {}}
                  className={`flex items-center justify-center w-[30px] h-[30px] rounded-full text-sm font-medium cursor-pointer
                    ${isActive 
                      ? 'bg-gradient-to-r from-[#54B9E7] to-[#6a5de3] text-white' 
                      : isPast 
                        ? 'bg-[#6a5de3] text-white' 
                        : 'bg-gray-200 text-gray-500'}`}
                >
                  {step.number}
                </motion.button>
                <div className={`text-xs mt-1 text-center ${isActive ? 'text-[#6a5de3] font-medium' : 'text-gray-500'}`}>
                  {step.title}
                </div>
              </motion.div>
              
              {index < steps.length - 1 && (
                <motion.div 
                  className={`w-[60px] h-[2px] origin-left
                    ${isPast || isActive ? 'bg-[#6a5de3]' : 'bg-gray-300'}`}
                  variants={lineVariants}
                />
              )}
            </React.Fragment>
          );
        })}
      </div>
    </motion.div>
  );
}

--- /mnt/data/steps_extracted/steps/YearMonthSelection.tsx ---
import React from 'react';
import { useStore } from '@/lib/store';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export function YearMonthSelection() {
  const { 
    billingDate, 
    setBillingDate, 
    setCurrentStep,
    reportType
  } = useStore();

  const { toast } = useToast();

  const handleBack = () => {
    setCurrentStep(2);
  };

  const handleNext = () => {
    if (!billingDate.year || !billingDate.month) {
      toast({
        variant: "destructive",
        title: "Selection Required",
        description: "Please select both year and month to continue."
      });
      return;
    }

    setCurrentStep(3);
  };

  const years = ["2024", "2025"];
  const months = [
    { value: "1", label: "January" },
    { value: "2", label: "February" },
    { value: "3", label: "March" },
    { value: "4", label: "April" },
    { value: "5", label: "May" },
    { value: "6", label: "June" },
    { value: "7", label: "July" },
    { value: "8", label: "August" },
    { value: "9", label: "September" },
    { value: "10", label: "October" },
    { value: "11", label: "November" },
    { value: "12", label: "December" }
  ];

  return (
    <div className="w-full max-w-2xl mx-auto bg-white p-8 rounded-md border border-gray-200">
      <h2 className="text-xl font-semibold bg-gradient-to-r from-blue-900 to-purple-900 text-white mb-2">
        Select Billing Period
      </h2>
      <p className="text-gray-600 mb-6 text-sm">
        Choose the year and month for your billing report
      </p>

      <div className="space-y-6 mt-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Year</label>
          <Select 
            value={billingDate.year} 
            onValueChange={(value) => setBillingDate({...billingDate, year: value})}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Select year" />
            </SelectTrigger>
            <SelectContent>
              {years.map(year => (
                <SelectItem key={year} value={year}>{year}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Month</label>
          <Select 
            value={billingDate.month} 
            onValueChange={(value) => setBillingDate({...billingDate, month: value})}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Select month" />
            </SelectTrigger>
            <SelectContent>
              {months.map(month => (
                <SelectItem key={month.value} value={month.value}>{month.label}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="pt-6 flex justify-between mt-8">
        <Button
          variant="outline"
          type="button"
          onClick={handleBack}
          className="bg-white hover:bg-gray-50"
        >
          Back
        </Button>
        <Button 
          type="button" 
          onClick={handleNext}
          className="px-5 py-2 bg-gradient-to-r from-[#54B9E7] to-[#6a5de3] text-white hover:opacity-90"
        >
          Next
        </Button>
      </div>
    </div>
  );
}